demo()
install.packages('twittR')
install.packages('titteR')
install.packages('twitteR')
install.packages('streamR')
twitCred$handshake()
twitCred$handshake()
library(twitteR)
library(ROAuth)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
tweetList <- searchTwitter("cycling",n=50)
source('~/.active-rstudio-document')
tweetList <- searchTwitter("cycling",n=50)
library(ROAuth)
library(twitteR)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(tw.df)+geom_point(aes(x=created,y=screenName))
source('~/.active-rstudio-document')
install.packages(plyr)
library(swirl)
install.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
z * 2 + 1000
my_div
swirl()
install_from_swirl("Data Analysis")
swirl()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
29
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
20
10
25
4
summary(cars$price)
exit()
swirl
swirl()
install_from_swirl("Mathematical Biostatistics Boot Camp")
swirl()
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
mean(allMPG)
sampVarMPG <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0) / squrt(sampVarMPG/n)
tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal <- pVal1 * 2
pVal
t.test(allMPG, mu=12.0, alternative="two.sided")
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4)~parent,galton)
regline <- lm(child~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline,lwd=3, col='red')
summary(regrline)
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
swirl()
swirl()
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
manipulate
manipulate()
swirl()
setwd("~/Google Drive/Booz/Counties")
train <- read.csv("ACS_14_5YR_S1703_with_ann.csv")
summary(train)
train[HC01_EST_VC01]
train['HC01_EST_VC01']
aggregate(train['HC01_EST_VC01'],train['GEO.display-label'])
table(train$HC01_EST_VC01)
data.frame(train$GEO.id, train$HC01_EST_VC01)
data.frame(train$GEO.display.label, train$HC01_EST_VC01)
summary(train$HC01_EST_VC01)
data.frame(train$GEO.display.label, train$HC01_EST_VC01)
train <- read.csv("ACS_14_5YR_S2201_with_ann.csv")
data.frame(train$GEO.display.label, train$HC01_EST_VC01)
data.frame(train$GEO.display.label, train$HC01_EST_VC01[1])
data.frame(train$GEO.display.label, train$HC01_EST_VC01[2])
data.frame(train$GEO.display.label, train$HC02_EST_VC01 / train$HC01_EST_VC01)
summary(data.frame(train$GEO.display.label, train$HC01_EST_VC01))
table(data.frame(train$GEO.display.label, train$HC01_EST_VC01))
aggregate(GEO.display.label ~ HC01_EST_VC01 + HC02_EST_VC01, data=train, FUN = sum})
aggregate(GEO.display.label ~ HC01_EST_VC01 + HC02_EST_VC01, data=train, FUN = sum)
do.call(rbind,lapply(train[HC01_EST_VC01:HC02_EST_VC01],tblFun))
3
do.call(rbind,lapply(train[HC01_EST_VC01],tblFun))
tblFun <- function(x){
tbl <- table(x)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
colnames(res) <- c('HC01_EST_VC01','HC02_EST_VC01')
res
}
do.call(rbind,lapply(train[HC01_EST_VC01],tblFun))
do.call(rbind,lapply(train['HC01_EST_VC01'],tblFun))
train['HC01_EST_VC01'][2]
train['HC01_EST_VC01'][[2]]
train['HC01_EST_VC01'][2]
train['HC01_EST_VC01']
train['HC01_EST_VC01'][1]
train['HC01_EST_VC01'][1]
train['HC01_EST_VC01'][1]
train['HC01_EST_VC01'][1][1]
train['HC01_EST_VC01'][1][1]
train['HC01_EST_VC01']
prop.table(table(train$HC01_EST_VC01))
prop.table(table(train$HC01_EST_VC01,train$HC01_EST_VC01))
prop.table(table(train$HC01_EST_VC01,train$HC02_EST_VC01))
prop.table(table(train$HC01_EST_VC01))
prop.table(table(train$HC01_EST_VC01,train$HC02_EST_VC01))
prop.table(table(train$HC01_EST_VC01 / train$HC02_EST_VC01))
prop.table(table(as.numeric(train$HC01_EST_VC01 / train$HC02_EST_VC01))
prop.table(table(as.factor(as.numeric(train$HC01_EST_VC01 / train$HC02_EST_VC01))))
table(as.factor(as.numeric(train$HC01_EST_VC01 / train$HC02_EST_VC01)))
train$a <- train$HC01_EST_VC01 / train$HC02_EST_VC01
table(as.numeric(train$HC01_EST_VC01) / as.numeric(train$HC02_EST_VC01) * 100)
table(as.numeric(train$HC01_EST_VC01) / as.numeric(train$HC02_EST_VC01))
table(as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01))
as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01))
as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01)
data.frame(train$GEO.display.label, as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01))
as.numeric(train$HC02_EST_VC01)
train$HC02_EST_VC01 / train$HC01_EST_VC01
as.numeric(
as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01)
as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01)
as.numeric(train$HC01_EST_VC01)
train$HC02_EST_VC01
as.numeric(train$HC02_EST_VC01)
as.numeric_version(train$HC02_EST_VC01)
as.numeric(train$HC02_EST_VC01) / as.numeric(train$HC01_EST_VC01)
as.numeric(train$HC02_EST_VC01)
as.numeric(as.character(train$HC02_EST_VC01))
as.numeric(as.character(train$HC02_EST_VC01)) / as.numeric(as.character(train$HC01_EST_VC01))
train$SNAP_Participation_Rate <- as.numeric(as.character(train$HC02_EST_VC01)) / as.numeric(as.character(train$HC01_EST_VC01))
train$SNAP_Participation_Rate
summary(train$SNAP_Participation_Rate)
train$SNAP_Participation_Rate[2]
train$SNAP_Participation_Rate[1]
match(train$SNAP_Participation_Rate, 0.52780)
which(0.52780 %in% train$SNAP_Participation_Rate)
train$SNAP_Participation_Rate[0]
train$SNAP_Participation_Rate[2]
train$SNAP_Participation_Rate[1]
train$SNAP_Participation_Rate[3]
match(train$SNAP_Participation_Rate[,1], 0.52780)
match(train$SNAP_Participation_Rate[1,], 0.52780)
train$SNAP_Participation_Rate[1,]
train$SNAP_Participation_Rate[,1]
train$SNAP_Participation_Rate[1][1]
train$SNAP_Participation_Rate[2][1]
train$SNAP_Participation_Rate[2][1,]
train$SNAP_Participation_Rate[2][1]
train$SNAP_Participation_Rate[2][1][1]
train$SNAP_Participation_Rate[2,1][1]
train$SNAP_Participation_Rate[2]
match(train$SNAP_Participation_Rate[1], 0.52780)
match(train$SNAP_Participation_Rate, 0.52780)
match(c(0.52780,1,0), 0.52780)
match(unlist(train$SNAP_Participation_Rate), 0.52780)
match(as.numeric(as.character(train$SNAP_Participation_Rate)), 0.52780)
as.numeric(as.character(train$SNAP_Participation_Rate))
as.numeric(as.character(tail(train$SNAP_Participation_Rate))
as.numeric(as.character(tail(train$SNAP_Participation_Rate, n=1))
as.numeric(as.character(tail(train$SNAP_Participation_Rate, n=1)))
as.numeric(as.character(tail(train$SNAP_Participation_Rate)))
as.numeric(as.character(train$SNAP_Participation_Rate))[length(train$SNAP_Participation_Rate)]
match(as.numeric(as.character(train$SNAP_Participation_Rate)), 0.07276368)
match(train$SNAP_Participation_Rate, 0.07276368)
match(c(0.52780,1,0), 0.52780)
