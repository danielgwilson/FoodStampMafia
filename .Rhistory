write.csv(model, file = "daniel.csv", row.names = FALSE)
View(model)
# initial stuff like setting the working directory
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls()) # clears all variables from your workspace -- same as the sweepy broom thing on the right
# load some csv files
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,] # deletes descriptor line -- rerun the above line without this to see descriptions
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE) # I didn't have to remove a descriptive line for this one
##############################
# ----------------------------
# build main model dataset
# ----------------------------
##############################
model <- data.frame(matrix(nrow = 3142)) # create an empty data frame with the correct length
model$FIPS <- raw_FoodStamps$GEO.id2 # copy the FIPS code column and make the header name FIPS
model[1] <- NULL # delete the initial empty NAs column
model$County <- raw_FoodStamps$GEO.display.label # copy the County Name, State column from the census data
# state filter -- split the County Name, State column into separate county and state columns by splitting at the comma
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
# DIFFERENT NUMBER OF ROWS EXAMPLE -- use merge and a temporary two column dataframe to load in data with different lengths
# note that I did some math while loading in Poverty_Sub125. Use as.numeric to get it to read properly.
model <- merge(model, data.frame(
FIPS = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# DIFFERENT NUMBER OF ROWS EXAMPLE (simple) -- note that you can also explicitly state the reference column name "FIPS"
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = 1,
by.y = 1)
model$SNAP_Recipients <- sub(',', '', as.character(model$SNAP_Recipients))
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(model$Poverty_Sub125)
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
model$Population <- as.numeric(gsub(',', '', as.character(model$Population)))
summary(model$Population)
# engineered features
model$SNAP_RatioSub50 <- ifelse(model$SNAP_ParticipationRatio <= 0.75, 1, 0)
write.csv(model, file = "daniel.csv", row.names = FALSE)
model$SNAP_Recipients <- as.numeric(gsub(',', '', as.character(model$SNAP_Recipients)))
model$SNAP_ParticipationRatio <- model$SNAP_Recipients / model$Poverty_Sub125
##############################
# ----------------------------
# Danny's how-to-load-data guide for R
# Please do not commit changes to this file on GitHub
# ----------------------------
##############################
# initial stuff like setting the working directory
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls()) # clears all variables from your workspace -- same as the sweepy broom thing on the right
# load some csv files
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,] # deletes descriptor line -- rerun the above line without this to see descriptions
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE) # I didn't have to remove a descriptive line for this one
##############################
# ----------------------------
# build main model dataset
# ----------------------------
##############################
model <- data.frame(matrix(nrow = 3142)) # create an empty data frame with the correct length
model$FIPS <- as.numeric(raw_FoodStamps$GEO.id2) # copy the FIPS code column and make the header name FIPS
model[1] <- NULL # delete the initial empty NAs column
model$County <- raw_FoodStamps$GEO.display.label # copy the County Name, State column from the census data
# state filter -- split the County Name, State column into separate county and state columns by splitting at the comma
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
# DIFFERENT NUMBER OF ROWS EXAMPLE -- use merge and a temporary two column dataframe to load in data with different lengths
# note that I did some math while loading in Poverty_Sub125. Use as.numeric to get it to read properly.
model <- merge(model, data.frame(
FIPS = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# DIFFERENT NUMBER OF ROWS EXAMPLE (simple) -- note that you can also explicitly state the reference column name "FIPS"
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = "FIPS",
by.y = "FIPS")
# The numbers above have COMMAS. WTF. This is annoying to deal with when calculating things, so let's get rid of them.
model$SNAP_Recipients <- as.numeric(gsub(',', '', as.character(model$SNAP_Recipients))) # gsub replaces "," with ""
# This is an engineered feature. I want a ratio of participants to possible participants.
model$SNAP_ParticipationRatio <- model$SNAP_Recipients / model$Poverty_Sub125
# Importing population data, same as above.
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
# The population data also has problems with commas.
model$Population <- as.numeric(gsub(',', '', as.character(model$Population)))
# Another engineered feature -- I want a boolean that is 1 if the SNAP ratio is below 75%, and 0 if it is above.
model$SNAP_RatioSub50 <- ifelse(model$SNAP_ParticipationRatio <= 0.75, 1, 0)
# This saves your dataframe to a csv file and lets you use it elsewhere.
write.csv(model, file = "daniel.csv", row.names = FALSE)
model <- data.frame(matrix(nrow = 3142)) # create an empty data frame with the correct length
model$FIPS <- as.numeric(raw_FoodStamps$GEO.id2) # copy the FIPS code column and make the header name FIPS
model[1] <- NULL # delete the initial empty NAs column
model$County <- raw_FoodStamps$GEO.display.label # copy the County Name, State column from the census data
# state filter -- split the County Name, State column into separate county and state columns by splitting at the comma
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
# DIFFERENT NUMBER OF ROWS EXAMPLE -- use merge and a temporary two column dataframe to load in data with different lengths
# note that I did some math while loading in Poverty_Sub125. Use as.numeric to get it to read properly.
model <- merge(model, data.frame(
FIPS = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
View(raw_Poverty)
##############################
# ----------------------------
# Danny's how-to-load-data guide for R
# Please do not commit changes to this file on GitHub
# ----------------------------
##############################
# initial stuff like setting the working directory
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls()) # clears all variables from your workspace -- same as the sweepy broom thing on the right
# load some csv files
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,] # deletes descriptor line -- rerun the above line without this to see descriptions
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE) # I didn't have to remove a descriptive line for this one
##############################
# ----------------------------
# build main model dataset
# ----------------------------
##############################
model <- data.frame(matrix(nrow = 3142)) # create an empty data frame with the correct length
model$FIPS <- as.numeric(raw_FoodStamps$GEO.id2) # copy the FIPS code column and make the header name FIPS
model[1] <- NULL # delete the initial empty NAs column
model$County <- raw_FoodStamps$GEO.display.label # copy the County Name, State column from the census data
# state filter -- split the County Name, State column into separate county and state columns by splitting at the comma
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
# DIFFERENT NUMBER OF ROWS EXAMPLE -- use merge and a temporary two column dataframe to load in data with different lengths
# note that I did some math while loading in Poverty_Sub125. Use as.numeric to get it to read properly.
model <- merge(model, data.frame(
FIPS = as.numeric(raw_Poverty$GEO.id2),
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# DIFFERENT NUMBER OF ROWS EXAMPLE (simple) -- note that you can also explicitly state the reference column name "FIPS"
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = "FIPS",
by.y = "FIPS")
# The numbers above have COMMAS. WTF. This is annoying to deal with when calculating things, so let's get rid of them.
model$SNAP_Recipients <- as.numeric(gsub(',', '', as.character(model$SNAP_Recipients))) # gsub replaces "," with ""
# This is an engineered feature. I want a ratio of participants to possible participants.
model$SNAP_ParticipationRatio <- model$SNAP_Recipients / model$Poverty_Sub125
# Importing population data, same as above.
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
# The population data also has problems with commas.
model$Population <- as.numeric(gsub(',', '', as.character(model$Population)))
# Another engineered feature -- I want a boolean that is 1 if the SNAP ratio is below 75%, and 0 if it is above.
model$SNAP_RatioSub50 <- ifelse(model$SNAP_ParticipationRatio <= 0.75, 1, 0)
# This saves your dataframe to a csv file and lets you use it elsewhere.
write.csv(model, file = "daniel.csv", row.names = FALSE)
View(raw_Poverty)
View(model)
model <- merge(model, data.frame(
FIPS = (raw_Poverty$GEO.id2),
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
model <- merge(model, data.frame(
FIPS = as.numeric(raw_Poverty$GEO.id2),
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
##############################
# ----------------------------
# Danny's how-to-load-data guide for R
# Please do not commit changes to this file on GitHub
# ----------------------------
##############################
# initial stuff like setting the working directory
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls()) # clears all variables from your workspace -- same as the sweepy broom thing on the right
# load some csv files
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,] # deletes descriptor line -- rerun the above line without this to see descriptions
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE) # I didn't have to remove a descriptive line for this one
##############################
# ----------------------------
# build main model dataset
# ----------------------------
##############################
model <- data.frame(matrix(nrow = 3142)) # create an empty data frame with the correct length
model$FIPS <- as.numeric(raw_FoodStamps$GEO.id2) # copy the FIPS code column and make the header name FIPS
model[1] <- NULL # delete the initial empty NAs column
model$County <- raw_FoodStamps$GEO.display.label # copy the County Name, State column from the census data
# state filter -- split the County Name, State column into separate county and state columns by splitting at the comma
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
# DIFFERENT NUMBER OF ROWS EXAMPLE -- use merge and a temporary two column dataframe to load in data with different lengths
# note that I did some math while loading in Poverty_Sub125. Use as.numeric to get it to read properly.
model <- merge(model, data.frame(
FIPS = as.numeric(raw_Poverty$GEO.id2),
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# DIFFERENT NUMBER OF ROWS EXAMPLE (simple) -- note that you can also explicitly state the reference column name "FIPS"
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = "FIPS",
by.y = "FIPS")
# The numbers above have COMMAS. WTF. This is annoying to deal with when calculating things, so let's get rid of them.
model$SNAP_Recipients <- as.numeric(gsub(',', '', as.character(model$SNAP_Recipients))) # gsub replaces "," with ""
# This is an engineered feature. I want a ratio of participants to possible participants.
model$SNAP_ParticipationRatio <- model$SNAP_Recipients / model$Poverty_Sub125
# Importing population data, same as above.
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
# The population data also has problems with commas.
model$Population <- as.numeric(gsub(',', '', as.character(model$Population)))
# Another engineered feature -- I want a boolean that is 1 if the SNAP ratio is below 75%, and 0 if it is above.
model$SNAP_RatioSub50 <- ifelse(model$SNAP_ParticipationRatio <= 0.75, 1, 0)
# This saves your dataframe to a csv file and lets you use it elsewhere.
write.csv(model, file = "daniel.csv", row.names = FALSE)
library(rpart)
fit <- rpart(SNAP_RatioSub50 ~ Population + FIPS + State, data=train, method = "class")
##############################
# ----------------------------
# Danny's starting example for subsetting training and test sets,
# then building a machine learning model off of them.
# * Please do not commit changes to this file on GitHub *
# ----------------------------
##############################
# inital setup
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls())
model <- read.csv("daniel.csv", stringsAsFactors = FALSE)
# split into training and test sets
smpl_size <- floor(0.75 * nrow(model)) # set a sample size, e.g. 75% training -> 25% test
set.seed(1337) # set the seed so that the randomness is reproducible
train_indeces <- sample(seq_len(nrow(model)), size = smpl_size) # get the indeces of a sample of the designated size
train <- model[train_indeces, ] # save the sample indeces to train
test <- model[-train_indeces, ] # save everything BUT the sample indeces to test
library(rpart)
fit <- rpart(SNAP_RatioSub50 ~ Population + FIPS + State, data=train, method = "class")
plot(fit)
text(fit)
#install.packages('rattle')
#install.packages('rpart.plot')
#install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
library(caret)
test <- test[-which(test$State == "District of Columbia"),]
predictions <- predict(fit, test)
print(predictions)
distconfusionMatrix(predictions$class, y_test)
predictions <- predict(fit, test)
print(predictions)
fit <- rpart(SNAP_RatioSub50 ~ Population + FIPS, data=train, method = "class")
fancyRpartPlot(fit)
test <- test[-which(test$State == "District of Columbia"),] # remove district of columbia from the test set since it wasn't trained
predictions <- predict(fit, test)
print(predictions)
View(predictions)
#
##### project name: FoodStampMafia
##### name: Elaine Pak
#
#
#
###______________________________Mean Population from 2010
# create population data frames from 2 files
popcount <- read.csv("UrbanRuralStatusOfCounty.csv", head=T, stringsAsFactors = FALSE )
popcount2 <- read.csv("SNAPParticipationAndCost.csv", head=T, stringsAsFactors = FALSE )
popcount <- popcount[1:3143,]
popcount2 <- popcount2[1:3196,]
# use merge function to screen out the counties that belong to both files
install.packages("data.table")
library(data.table)
popcount_final <- merge(popcount2, popcount, by.x="FIPS", by.y="FIPS", all = T)
# create a new data frame with just population numbers from both files
popcompare <- data.frame(matrix(nrow = 3196))
popcompare$pop1 <- popcount_final$Population_2010
popcompare$pop2 <- popcount_final$POP10
# the following two lines properly convert variables from character to number
popcompare$pop1 <- sub(',', '', popcompare$pop1)
popcompare$pop2 <- sub(',', '', popcompare$pop2)
popcompare$popmedian <- (as.numeric(popcompare$pop1) + as.numeric(popcompare$pop2))/2
popcompare$FIPS <- popcount_final$FIPS
popcompare <- popcompare[,-1]
popcompare <- popcompare[,-1]
popcompare <- popcompare[,-1]
# done
ready <- data.frame(FIPS = popcount_final$FIPS, pop_mean_2010 = popcompare$popmedian)
write.csv(ready, file = "Elaine-MeanPop2010-.csv", row.names = FALSE)
#
#
#
###______________________________Urban/Rural Status from 2013
urstatus <- read.csv("UrbanRuralStatusOfCounty.csv", head=T, stringsAsFactors = FALSE )
summary(urstatus)
# create a codebook that explains what UIC_2013 numbers 1 thru 12 mean
urstatus_codebook <- data.frame(matrix(nrow = 3221))
urstatus_codebook$UIC_2013 <- urstatus$UIC_2013
urstatus_codebook$Description <- urstatus$Description
duplicated(urstatus_codebook) # shows "TRUE" for duplicated values
urstatus_codebook <- urstatus_codebook[,-1] # get rid of the unnecessary first column full of NA
urstatus_codebook <- urstatus_codebook[!duplicated(urstatus_codebook), ] # now only 12 rows left
urstatus_codebook <- urstatus_codebook[order(urstatus_codebook$UIC_2013),]
# done
ready <- data.frame(UIC_2013 = urstatus_codebook$UIC_2013, Description = urstatus_codebook$Description)
write.csv(ready, file = "UrbanRuralCodebook.csv", row.names = FALSE)
# merge urban/rural status code to Elaine.csv
popcompare <- merge(popcompare, data.frame(FIPS = urstatus$FIPS, UIC_2013 = urstatus$UIC_2013),
by.x = "FIPS", by.y = "FIPS", all = T)
write.csv(popcompare, file = "Elaine.csv", row.names = FALSE)
#
#
#
###______________________________Race of people below 125% PL from 2014
ACS <- read.csv("ACS_14_5YR_S1703_with_ann.csv", head=T, stringsAsFactors = FALSE)
elaine <- read.csv("Elaine.csv", head=T, stringsAsFactors = F)
# ACS$HC04_EST_VC22 # Sub125 Hispanic or Latino
# ACS$HC04_EST_VC23 # Sub125 White
# ACS$HC04_EST_VC15 # Sub125 Black
# ACS$HC04_EST_VC16 # Sub125 American Indian and Alaska Native
# ACS$HC04_EST_VC17 # Sub125 Asian
# ACS$HC04_EST_VC18 # Sub125 Native Hawaiian and Other Pacific Islander
# ACS$HC04_EST_VC19 # Sub125 Others
# ACS$HC04_EST_VC20 # Sub125 2 or more races
ACS$GEO.id2 <- as.numeric(ACS$GEO.id2)
ACS$HC04_EST_VC22 <- (as.numeric(ACS$HC01_EST_VC22)/100) * as.numeric(ACS$HC04_EST_VC22)
ACS$HC04_EST_VC23 <- (as.numeric(ACS$HC01_EST_VC23)/100) * as.numeric(ACS$HC04_EST_VC23)
ACS$HC04_EST_VC15 <- (as.numeric(ACS$HC01_EST_VC15)/100) * as.numeric(ACS$HC04_EST_VC15)
ACS$HC04_EST_VC16 <- (as.numeric(ACS$HC01_EST_VC16)/100) * as.numeric(ACS$HC04_EST_VC16)
ACS$HC04_EST_VC17 <- (as.numeric(ACS$HC01_EST_VC17)/100) * as.numeric(ACS$HC04_EST_VC17)
ACS$HC04_EST_VC18 <- (as.numeric(ACS$HC01_EST_VC18)/100) * as.numeric(ACS$HC04_EST_VC18)
ACS$HC04_EST_VC19 <- (as.numeric(ACS$HC01_EST_VC19)/100) * as.numeric(ACS$HC04_EST_VC19)
ACS$HC04_EST_VC20 <- (as.numeric(ACS$HC01_EST_VC20)/100) * as.numeric(ACS$HC04_EST_VC20)
elaine <- merge(elaine, data.frame(GEO.id2 = ACS$GEO.id2,
Hispanic_Sub125 = ACS$HC04_EST_VC22,
White_Sub125 = ACS$HC04_EST_VC23,
Black_Sub125 = ACS$HC04_EST_VC15,
Native_Sub125 = ACS$HC04_EST_VC16,
Asian_Sub125 = ACS$HC04_EST_VC17,
Island_Sub125 = ACS$HC04_EST_VC18,
Others_Sub125 = ACS$HC04_EST_VC19,
More_Sub125 = ACS$HC04_EST_VC20),
by.x = "FIPS", by.y = "GEO.id2", all = T)
write.csv(elaine, file = "Elaine.csv", row.names = FALSE)
View(elaine)
plot(elaine)
plot(elaine)
##############################
# ----------------------------
# Danny's starting example for subsetting training and test sets,
# then building a machine learning model off of them.
# * Please do not commit changes to this file on GitHub *
# ----------------------------
##############################
# inital setup
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls())
model <- read.csv("daniel.csv", stringsAsFactors = FALSE)
# split into training and test sets
smpl_size <- floor(0.75 * nrow(model)) # set a sample size, e.g. 75% training -> 25% test
set.seed(1337) # set the seed so that the randomness is reproducible
train_indeces <- sample(seq_len(nrow(model)), size = smpl_size) # get the indeces of a sample of the designated size
train <- model[train_indeces, ] # save the sample indeces to train
test <- model[-train_indeces, ] # save everything BUT the sample indeces to test
library(rpart)
fit <- rpart(SNAP_RatioSub50 ~ Population + FIPS, data=train, method = "class")
plot(fit)
text(fit)
#install.packages('rattle')
#install.packages('rpart.plot')
#install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
library(caret)
test <- test[-which(test$State == "District of Columbia"),] # remove district of columbia from the test set since it wasn't trained
predictions <- predict(fit, test)
print(predictions)
distconfusionMatrix(predictions$class, y_test)
fit <- rpart(SNAP_RatioSub75 ~ Population + FIPS, data=train, method = "class")
model <- read.csv("daniel.csv", stringsAsFactors = FALSE)
fit <- rpart(SNAP_RatioSub75 ~ Population + FIPS, data=train, method = "class")
View(model)
##############################
# ----------------------------
# Danny's how-to-load-data guide for R
# * Please do not commit changes to this file on GitHub *
# ----------------------------
##############################
# initial stuff like setting the working directory
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls()) # clears all variables from your workspace -- same as the sweepy broom thing on the right
# load some csv files
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,] # deletes descriptor line -- rerun the above line without this to see descriptions
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE) # I didn't have to remove a descriptive line for this one
##############################
# ----------------------------
# build main model dataset
# ----------------------------
##############################
model <- data.frame(matrix(nrow = 3142)) # create an empty data frame with the correct length
model$FIPS <- as.numeric(raw_FoodStamps$GEO.id2) # copy the FIPS code column and make the header name FIPS
model[1] <- NULL # delete the initial empty NAs column
model$County <- raw_FoodStamps$GEO.display.label # copy the County Name, State column from the census data
# state filter -- split the County Name, State column into separate county and state columns by splitting at the comma
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
# DIFFERENT NUMBER OF ROWS EXAMPLE -- use merge and a temporary two column dataframe to load in data with different lengths
# note that I did some math while loading in Poverty_Sub125. Use as.numeric to get it to read properly.
model <- merge(model, data.frame(
FIPS = as.numeric(raw_Poverty$GEO.id2),
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# DIFFERENT NUMBER OF ROWS EXAMPLE (simple) -- note that you can also explicitly state the reference column name "FIPS"
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = "FIPS",
by.y = "FIPS")
# The numbers above have COMMAS. WTF. This is annoying to deal with when calculating things, so let's get rid of them.
model$SNAP_Recipients <- as.numeric(gsub(',', '', as.character(model$SNAP_Recipients))) # gsub replaces "," with ""
# This is an engineered feature. I want a ratio of participants to possible participants.
model$SNAP_ParticipationRatio <- model$SNAP_Recipients / model$Poverty_Sub125
# Importing population data, same as above.
model <- merge(model, data.frame(
FIPS = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
# The population data also has problems with commas.
model$Population <- as.numeric(gsub(',', '', as.character(model$Population)))
# Another engineered feature -- I want a boolean that is 1 if the SNAP ratio is below 75%, and 0 if it is above.
model$SNAP_RatioSub75 <- ifelse(model$SNAP_ParticipationRatio <= 0.75, 1, 0)
# This saves your dataframe to a csv file and lets you use it elsewhere.
write.csv(model, file = "daniel.csv", row.names = FALSE)
View(model)
##############################
# ----------------------------
# Danny's starting example for subsetting training and test sets,
# then building a machine learning model off of them.
# * Please do not commit changes to this file on GitHub *
# ----------------------------
##############################
# inital setup
setwd("~/Google Drive/Booz/FoodStampMafia")
rm(list=ls())
model <- read.csv("daniel.csv", stringsAsFactors = FALSE)
# split into training and test sets
smpl_size <- floor(0.75 * nrow(model)) # set a sample size, e.g. 75% training -> 25% test
set.seed(1337) # set the seed so that the randomness is reproducible
train_indeces <- sample(seq_len(nrow(model)), size = smpl_size) # get the indeces of a sample of the designated size
train <- model[train_indeces, ] # save the sample indeces to train
test <- model[-train_indeces, ] # save everything BUT the sample indeces to test
library(rpart)
fit <- rpart(SNAP_RatioSub75 ~ Population + FIPS, data=train, method = "class")
plot(fit)
text(fit)
#install.packages('rattle')
#install.packages('rpart.plot')
#install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
library(caret)
test <- test[-which(test$State == "District of Columbia"),] # remove district of columbia from the test set since it wasn't trained
predictions <- predict(fit, test)
print(predictions)
distconfusionMatrix(predictions$class, y_test)
install.packages('randomForest')
library(randomForest)
set.seed(415)
# fit <- randomForest(as.factor(SNAP_RatioSub75) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
#                     data=train,
#                     importance=TRUE,
#                     ntree=2000)
fit <- rpart(SNAP_RatioSub75 ~ Population + FIPS, data=train, method = "class")
