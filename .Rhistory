model$TotalHouseholds <- raw_FoodStamps$HC01_EST_VC01
model$SNAP_Households <- raw_FoodStamps$HC02_EST_VC01
model$Poverty_Sub100 <- as.numeric(raw_Poverty$HD01_VD02) + as.numeric(raw_Poverty$HD01_VD03)
model[1] <- NULL
# engineered features
model$SNAP_ParticipationRate <- as.numeric(model$SNAP_Households) / as.numeric(model$TotalHouseholds)
model$SNAP_FillRate <- as.numeric(model$SNAP_Households) / as.numeric(model$Poverty_Sub100)
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
#####
# Old filter that was way too much effort
#####
# state_FIPS <- read.csv("state_fips.csv", stringsAsFactors = FALSE)
# as.numeric(substring(model$GEO.id[1],1,2))
# model$State <- NA
# state_FIPS <- state_FIPS[order(as.factor(state_FIPS$FIPS)), ]
# model$GEO.id[500]
# findInterval(as.numeric(substring(model$GEO.id[500],1,2)), state_FIPS$FIPS)
#
# model$State = state_FIPS$State[findInterval(as.numeric(substring(model$GEO.id,1,2)), state_FIPS$FIPS)]
# county with a specific SNAP_Participation_Rate
model$County[findInterval(0.5278107, model$SNAP_Participation_Rate[order(as.factor(model$SNAP_Participation_Rate))])]
countyWithRatio <- function(x) {
result <- model$County[findInterval(x, model$SNAP_Participation_Rate[order(as.factor(model$SNAP_Participation_Rate))])]
return(result)
}
countyWithRatio(0.5278107)
model$County[findInterval(0.5278107, model$SNAP_Participation_Rate[order(as.factor(model$SNAP_Participation_Rate))])]
model$County[findInterval(0.5278107, model$SNAP_Participation_Rate[order(model$SNAP_Participation_Rate)])]
model$SNAP_Participation_Rate[order(as.factor(model$SNAP_Participation_Rate))
model$SNAP_Participation_Rate[order(as.factor(model$SNAP_Participation_Rate))]
order(as.factor(model$SNAP_Participation_Rate))
as.factor(model$SNAP_Participation_Rate)
model$SNAP_Participation_Rate
model$County[findInterval(0.5278107, model$SNAP_ParticipationRate[order(as.factor(model$SNAP_ParticipationRate))])]
countyWithRatio <- function(x) {
result <- model$County[findInterval(x, model$SNAP_ParticipationRate[order(as.factor(model$SNAP_ParticipationRate))])]
return(result)
}
countyWithRatio(0.5278107)
# County Data
setwd("~/Google Drive/Booz/Counties")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_14_5YR_C17002_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
model$TotalHouseholds <- raw_FoodStamps$HC01_EST_VC01
model$SNAP_Households <- raw_FoodStamps$HC02_EST_VC01
model$Poverty_Sub100 <- as.numeric(raw_Poverty$HD01_VD02) + as.numeric(raw_Poverty$HD01_VD03)
model[1] <- NULL
# engineered features
model$SNAP_ParticipationRate <- as.numeric(model$SNAP_Households) / as.numeric(model$TotalHouseholds)
model$SNAP_FillRate <- as.numeric(model$SNAP_Households) / as.numeric(model$Poverty_Sub100)
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
#####
# Old filter that was way too much effort
#####
# state_FIPS <- read.csv("state_fips.csv", stringsAsFactors = FALSE)
# as.numeric(substring(model$GEO.id[1],1,2))
# model$State <- NA
# state_FIPS <- state_FIPS[order(as.factor(state_FIPS$FIPS)), ]
# model$GEO.id[500]
# findInterval(as.numeric(substring(model$GEO.id[500],1,2)), state_FIPS$FIPS)
#
# model$State = state_FIPS$State[findInterval(as.numeric(substring(model$GEO.id,1,2)), state_FIPS$FIPS)]
# county with a specific SNAP_Participation_Rate
countyWithRatio <- function(x) {
result <- model$County[findInterval(x, model$SNAP_ParticipationRate[order(as.factor(model$SNAP_ParticipationRate))])]
return(result)
}
countyWithRatio(0.5278107)
View(model)
# County Data
setwd("~/Google Drive/Booz/Counties")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_14_5YR_C17002_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
model$TotalHouseholds <- raw_FoodStamps$HC01_EST_VC01
model$SNAP_Households <- raw_FoodStamps$HC02_EST_VC01
model$Poverty_Sub100 <- as.numeric(raw_Poverty$HD01_VD02) + as.numeric(raw_Poverty$HD01_VD03)
model[1] <- NULL
# engineered features
model$SNAP_ParticipationRate <- as.numeric(model$SNAP_Households) / as.numeric(model$TotalHouseholds)
model$SNAP_FillRate <- as.numeric(model$SNAP_Households) / as.numeric(model$Poverty_Sub100)
# county with a specific SNAP_Participation_Rate
countyWithRatio <- function(x) {
result <- model$County[findInterval(x, model$SNAP_ParticipationRate[order(as.factor(model$SNAP_ParticipationRate))])]
return(result)
}
countyWithRatio(0.5278107)
View(raw_FoodStamps)
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- read.csv("ACS_14_5YR_C17002_with_ann.csv", stringsAsFactors = FALSE)
View(raw_Poverty)
raw_Food <- read.csv("ACS_14_5YR_B17013_with_ann.csv", stringsAsFactors = FALSE)
setwd("~/Google Drive/Booz/Counties")
raw_Food <- read.csv("ACS_14_5YR_B17013_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- read.csv("ACS_14_5YR_C17002_with_ann.csv", stringsAsFactors = FALSE)
raw_Food <- read.csv("ACS_14_5YR_B17013_with_ann.csv", stringsAsFactors = FALSE)
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_14_5YR_C17002_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_Food <- read.csv("ACS_14_5YR_B17013_with_ann.csv", stringsAsFactors = FALSE)
View(raw_Food)
raw_Poverty <- read.csv("ACS_14_5YR_C17002_with_ann.csv", stringsAsFactors = FALSE)
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
View(raw_SNAP)
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
merged <- merge(raw_Poverty, raw_FoodStamps)
View(merged)
merged <- merge(raw_Poverty, raw_FoodStamps, all = T)
View(merged)
merged <- merge(raw_Poverty, raw_FoodStamps, all = T, by = c(1,))
merged <- merge(raw_Poverty, raw_FoodStamps, all = T, by = c(1,2))
View(merged)
merged <- merge(raw_FoodStamps, raw_Poverty, all = T, by = c(1,2))
View(merged)
merged <- merge(raw_FoodStamps, raw_Poverty, by = c(1,2))
install.packages("plyr")
library(plyr)
?rbind.fill
rbind.fill(raw_FoodStamps, raw_Poverty)
merged <- merge(raw_FoodStamps, raw_Poverty, by = c(1,2))
View(merged)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = c(1,2))
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = c(1,))
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = 1)
View(merged)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = 1,)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = ,1)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = 2)
merged <- merge(model, raw_Poverty$HC01_EST_VC01)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = 1, all = TRUE)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = c(1,1), all = TRUE)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = c(1,2), all = TRUE)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = c(2,1), all = TRUE)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = c(1,1))
View(merged)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = 2)
merged <- merge(model, raw_Poverty$HC01_EST_VC01, by = 1)
merged <- merge(model, raw_Poverty, by = 2)
merged <- merge(model, raw_Poverty, by = c(1,2))
View(raw_Poverty)
model$GEO.id2 <- raw_FoodStamps$GEO.id2
raw_Poverty <- raw_Poverty[-1,]
raw_FoodStamps <- raw_FoodStamps[-1,]
model$GEO.id2 <- raw_FoodStamps$GEO.id2
merged <- merge(model, raw_Poverty, by = c(1,2))
merged <- merge(model, raw_Poverty)
merged <- merge(model, raw_Poverty, by = 1)
merged <- merge(model, raw_Poverty, by = 2)
merged <- merge(model, raw_Poverty, by.x = 1, by.y = 2)
View(merged)
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
View(raw_SNAP)
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
raw_SNAP$PRG_POV10[1]
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
model$Poverty_Sub125 <- (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)
merged <- merge(model, c(raw_Poverty$GEO.id2, (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)), by.x = 1, by.y = 1)
View(merged)
hi <- c(raw_Poverty$GEO.id2, (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01))
merged <- merge(model, data.frame(raw_Poverty$GEO.id2, (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)), by.x = 1, by.y = 1)
hi <- data.frame(raw_Poverty$GEO.id2, (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01))
View(hi)
hi <- data.frame(raw_Poverty$GEO.id2, as.factor((as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)))
View(hi)
hi <- data.frame(raw_Poverty$GEO.id2, PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01))
View(hi)
hi <- data.frame(GEO.id = raw_Poverty$GEO.id2, PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01))
View(hi)
merged <- merge(model, data.frame(raw_Poverty$GEO.id2, (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)), by.x = 1, by.y = 1)
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
View(merged)
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
merged <- merge(model, data.frame(raw_Poverty$GEO.id2, (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)), by.x = 1, by.y = 1)
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
View(model)
hi <- data.frame(GEO.id = raw_Poverty$GEO.id2, PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01))
View(hi)
model[1] <- NULL
merged <- merge(model, data.frame(GEO.id = raw_Poverty$GEO.id2, PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)), by.x = 1, by.y = 1)
View(merged)
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
model <- data.frame(matrix(nrow = 3142))
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
View(raw_FoodStamps)
model <- data.frame(matrix(nrow = 3142))
View(model)
model$GEO.id2 <- raw_FoodStamps$GEO.id2
View(raw_FoodStamps)
model$County <- raw_FoodStamps$GEO.display.label
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
model$TotalHouseholds <- raw_FoodStamps$HC01_EST_VC01
model$SNAP_Households <- raw_FoodStamps$HC02_EST_VC01
model$Poverty_Sub125 <- (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)
hi <- data.frame(GEO.id = raw_Poverty$GEO.id2, PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01))
View(hi)
merged <- merge(model, data.frame(
GEO.id = raw_Poverty$GEO.id2,
PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
merged <- merge(model, data.frame(
GEO.id = raw_Poverty$GEO.id2,
PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
View(merged)
merged <- merge(model, data.frame(
GEO.id2 = raw_Poverty$GEO.id2,
PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
model[1] <- NULL
merged <- merge(model, data.frame(
GEO.id2 = raw_Poverty$GEO.id2,
PovertyCount = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# County Data
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model[1] <- NULL
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
model$Poverty_Sub125 <- merge(model, data.frame(
GEO.id2 = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
View(model)
model <- merge(model, data.frame(
GEO.id2 = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
# engineered features
View(raw_SNAP)
model$FIPS = as.numeric(model$GEO.id2)
View(model)
model$GEO.id2 = as.numeric(model$GEO.id2)
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRG_POP10,
by.x = 1,
by.y = 1)
)
View(model)
model$GEO.id2 = as.numeric(model$GEO.id2)
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = 1,
by.y = 1)
View(model)
# County Data
setwd("~/Google Drive/Booz/FoodStampMafia")
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model[1] <- NULL
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
model <- merge(model, data.frame(
GEO.id2 = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
model$GEO.id2 = as.numeric(model$GEO.id2)
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = 1,
by.y = 1)
# engineered features
View(model)
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(model$Poverty_Sub125)
View(model)
as.numeric(as.character(
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(as.character(model$Poverty_Sub125)
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(as.character(model$Poverty_Sub125)
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(as.character(model$Poverty_Sub125))
View(model)
model$SNAP_ParticipationRatio <- as.numeric(as.character(model$SNAP_Recipients) / as.numeric(as.character(model$Poverty_Sub125))
model$SNAP_ParticipationRatio <- as.numeric(as.character(model$SNAP_Recipients)) / as.numeric(as.character(model$Poverty_Sub125))
View(model)
as.numeric(as.character(model$SNAP_Recipients[1])) / as.numeric(as.character(model$Poverty_Sub125[1]))
model$SNAP_Recipients[1]
as.character(model$SNAP_Recipients[1])
as.numeric(model$SNAP_Recipients[1])
as.numeric(as.numeric(model$SNAP_Recipients[1]))
as.numeric(as.character(model$SNAP_Recipients[1]))
model$SNAP_Recipients[1]
model$SNAP_Recipients[1] / as.numeric(as.character(model$Poverty_Sub125[1]))
as.character(model$SNAP_Recipients[1]) / as.numeric(as.character(model$Poverty_Sub125[1]))
as.numeric(model$SNAP_Recipients[1])
as.numeric(as.character(model$SNAP_Recipients[1]))
as.numeric(as.character(model$SNAP_Recipients[1,]))
as.numeric(as.character(model$SNAP_Recipients[,1]))
as.numeric(as.matrix(model$SNAP_Recipients[1]))
as.character(model$SNAP_Recipients[1])
model$SNAP_Recipients <- sub(',', '', as.character(model$SNAP_Recipients))
as.numeric(model$SNAP_Recipients[1])
as.character(model$SNAP_Recipients[1]) / as.numeric(as.character(model$Poverty_Sub125[1]))
model$SNAP_Recipients[1] / model$Poverty_Sub125[1]
as.numeric(model$SNAP_Recipients[1]) / as.numeric(model$Poverty_Sub125[1])
as.numeric(model$SNAP_Recipients[1])
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(model$Poverty_Sub125)
setwd("~/Google Drive/Booz/FoodStampMafia")
smpl_size <- floor(0.75 * nrow(model))
set.seed(1337)
train_indeces <- sample(seq_len(nrow(model)), size = smpl_size)
train <- model[train_ind, ]
train <- model[train_indeces, ]
test <- model[-train_indeces, ]
View(model)
View(test)
View(test)
View(train)
View(raw_Poverty)
model$Population <- raw_SNAP$POP10
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
model$SNAP_Recipients <- sub(',', '', as.character(model$Population))
model$SNAP_Recipients <- sub(',', '', as.character(model$SNAP_Recipients))
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(model$Poverty_Sub125)
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
model$Population <- sub(',', '', as.character(model$Population))
model$Population <- sub(',', '', as.character(model$Population))
# County Data
raw_FoodStamps <- read.csv("ACS_14_5YR_S2201_with_ann.csv", stringsAsFactors = FALSE)
raw_FoodStamps <- raw_FoodStamps[-1,]
raw_Poverty <- read.csv("ACS_10_5YR_S1703_with_ann.csv", stringsAsFactors = FALSE)
raw_Poverty <- raw_Poverty[-1,]
raw_SNAP <- read.csv("snap_data.csv", stringsAsFactors = FALSE)
##############################
# ----------------------------
# build main model dataset
model <- data.frame(matrix(nrow = 3142))
model$GEO.id2 <- raw_FoodStamps$GEO.id2
model[1] <- NULL
model$County <- raw_FoodStamps$GEO.display.label
# state filter
model$State <- sub(' ', '', sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][2]}))
model$County <- sapply(model$County, FUN = function(x) {strsplit(x, split = ",")[[1]][1]})
model <- merge(model, data.frame(
GEO.id2 = raw_Poverty$GEO.id2,
Poverty_Sub125 = (as.numeric(raw_Poverty$HC04_EST_VC01) / 100.0) * as.numeric(raw_Poverty$HC01_EST_VC01)),
by.x = 1,
by.y = 1)
model$GEO.id2 = as.numeric(model$GEO.id2)
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
SNAP_Recipients = raw_SNAP$PRGNUM10),
by.x = 1,
by.y = 1)
model$SNAP_Recipients <- sub(',', '', as.character(model$SNAP_Recipients))
model$SNAP_ParticipationRatio <- as.numeric(model$SNAP_Recipients) / as.numeric(model$Poverty_Sub125)
model <- merge(model, data.frame(
GEO.id2 = raw_SNAP$FIPS,
Population = raw_SNAP$POP10),
by.x = 1,
by.y = 1)
model$Population <- sub(',', '', as.character(model$Population))
# split into training and test sets
smpl_size <- floor(0.75 * nrow(model))
set.seed(1337)
train_indeces <- sample(seq_len(nrow(model)), size = smpl_size)
train <- model[train_indeces, ]
test <- model[-train_indeces, ]
# random forest
fit <- randomForest(SNAP_ParticipationRatio ~ State + ,
data=train,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
library(rpart)
library(randomForest)
fit <- randomForest(SNAP_ParticipationRatio ~ State + Population,
data=train,
importance=TRUE,
ntree=2000)
summary(train.SNAP_ParticipationRatio)
summary(train$SNAP_ParticipationRatio)
summary(train$State)
summary(train$Population)
fit <- randomForest(SNAP_ParticipationRatio ~ as.factor(State) + as.factor(Population),
data=train,
importance=TRUE,
ntree=2000)
fit <- randomForest(as.factor(SNAP_ParticipationRatio) ~ as.factor(State) + as.factor(Population),
data=train,
importance=TRUE,
ntree=2000)
